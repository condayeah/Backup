CREATE OR REPLACE PACKAGE TEST.ENCKEY
IS
	FUNCTION GET_ENC_KEY RETURN VARCHAR2;	
END ENCKEY;

CREATE OR REPLACE PACKAGE BODY TEST.ENCKEY
IS
	FUNCTION GET_ENC_KEY RETURN VARCHAR2
	IS
		FHANDLE UTL_FILE.FILE_TYPE;
		FBUFFER VARCHAR2(64);
		INPUT_STRING VARCHAR2(64);
		KEY_RAW RAW(16) := UTL_RAW.CAST_TO_RAW('test1234test1234');
		OUTPUT_RAW RAW(1024);
		V_OUT_STRING VARCHAR2(1024);
		AES_CBC_PKCS5 CONSTANT PLS_INTEGER := DBMS_CRYPTO.ENCRYPT_AES128 + DBMS_CRYPTO.CHAIN_CBC + DBMS_CRYPTO.PAD_PKCS5;
	BEGIN
		--CREATE DIRECTORY ENC_KEY AS '/home/oracle/enc_key' test3
		--SELECT * FROM ALL_DIRECTORIES
		FHANDLE := UTL_FILE.FOPEN('ENC_KEY', 'enc_key.txt', 'R');
		UTL_FILE.GET_LINE(FHANDLE, FBUFFER, 64);
		INPUT_STRING := FBUFFER;
		UTL_FILE.FCLOSE(FHANDLE);
		IF INPUT_STRING IS NULL THEN
		 RETURN NULL;
		END IF;
		OUTPUT_RAW := DBMS_CRYPTO.DECRYPT(
				src => INPUT_STRING,
				typ => AES_CBC_PKCS5,
				key => KEY_RAW);	
		V_OUT_STRING := UTL_I18N.RAW_TO_CHAR(OUTPUT_RAW, 'AL32UTF8');
	RETURN V_OUT_STRING;
	END GET_ENC_KEY;	
END ENCKEY;	




DECLARE
  vv_ddl CLOB; 
BEGIN

  vv_ddl := 
'
CREATE OR REPLACE PACKAGE TEST.ENCKEY
IS
	FUNCTION GET_ENC_KEY RETURN VARCHAR2;
END ENCKEY;
';
DBMS_DDL.CREATE_WRAPPED ( vv_ddl );

EXCEPTION WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE(SQLERRM);
END ;


DECLARE
  vv_ddl CLOB; 
BEGIN

  vv_ddl := 
'

CREATE OR REPLACE PACKAGE BODY TEST.ENCKEY
IS
	FUNCTION GET_ENC_KEY RETURN VARCHAR2
	IS
		FHANDLE UTL_FILE.FILE_TYPE;
		FBUFFER VARCHAR2(64);
		INPUT_STRING VARCHAR2(64);
		KEY_RAW RAW(16) := UTL_RAW.CAST_TO_RAW(''test1234test1234'');
		OUTPUT_RAW RAW(1024);
		V_OUT_STRING VARCHAR2(1024);
		AES_CBC_PKCS5 CONSTANT PLS_INTEGER := DBMS_CRYPTO.ENCRYPT_AES128 + DBMS_CRYPTO.CHAIN_CBC + DBMS_CRYPTO.PAD_PKCS5;
	BEGIN
		--CREATE DIRECTORY ENC_KEY AS ''/home/oracle/enc_key''
		--SELECT * FROM ALL_DIRECTORIES
		FHANDLE := UTL_FILE.FOPEN(''ENC_KEY'', ''enc_key.txt'', ''R'');
		UTL_FILE.GET_LINE(FHANDLE, FBUFFER, 64);
		INPUT_STRING := FBUFFER;
		UTL_FILE.FCLOSE(FHANDLE);
		IF INPUT_STRING IS NULL THEN
		 RETURN NULL;
		END IF;
		OUTPUT_RAW := DBMS_CRYPTO.DECRYPT(
				src => INPUT_STRING,
				typ => AES_CBC_PKCS5,
				key => KEY_RAW);	
		V_OUT_STRING := UTL_I18N.RAW_TO_CHAR(OUTPUT_RAW, ''AL32UTF8'');
	RETURN V_OUT_STRING;
	END GET_ENC_KEY;	
END ENCKEY;	
';

DBMS_DDL.CREATE_WRAPPED ( vv_ddl );

EXCEPTION WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE(SQLERRM);
END ;
